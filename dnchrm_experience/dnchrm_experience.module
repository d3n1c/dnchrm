<?php

/* 
 * Copyright (C) 2016 denic wibowo
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file
 * Module to handle experience datas of human resource management
 * 
 * Handling experience datas of management of human resources
 */

/**
 * Implementation of hook_load
 * @return arg
 **/
function dnchrm_experience_load($arg) {
  return check_plain($arg);
}

/**
 * Implementation of hook_menu
 * 
 * @return array
 */
function dnchrm_experience_menu() {
  $items = array();
  $items['admin/config/dncsystem/dnchrm/experience'] = array(
    'title' => 'Experience Params',
    'description' => 'Experience parameters and configurations',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dnchrm_experience_admin_params'),
    'file' => 'dnchrm_experience.admin.inc',
  );
  $items['dnchrm/experience'] = array(
    'title' => 'Experience Data',
    'description' => 'Experience data information',
    'access arguments' => array('view dnc hrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dnchrm_experience_person_listing'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['dnchrm/experience/%dnchrm_experience'] = array(
    'title' => 'Person\'s Experiences',
    'description' => 'Experience data information of the person',
    'access arguments' => array('view dnc hrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dnchrm_experience_organizational', 2),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dnchrm_experience.organizational.inc',
  );
  $items['dnchrm/experience/%dnchrm_experience/organizationals'] = array(
    'title' => 'Organizational',
    'description' => 'Organizational experience data information',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['dnchrm/experience/%dnchrm_experience/organizationals/add'] = array(
    'title' => 'Add',
    'description' => 'Add personal data organizational experience',
    'access arguments' => array('use dnc hrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dnchrm_experience_organizational_add', 2),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'dnchrm_experience.organizational.inc',
  );
  $items['dnchrm/experience/%dnchrm_experience/works'] = array(
    'title' => 'Working',
    'description' => 'Working experience data information',
    'access arguments' => array('view dnc hrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dnchrm_experience_working', 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dnchrm_experience.work.inc',
    'weight' => 2,
  );
  $items['dnchrm/experience/%dnchrm_experience/works/add'] = array(
    'title' => 'Add',
    'description' => 'Add personal data working experience',
    'access arguments' => array('use dnc hrm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dnchrm_experience_working_add', 2),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'dnchrm_experience.work.inc',
  );
  
  return $items;
}

/**
 * Get content type scheme that be used in the system
 * It can be source of the script or result from converting action
 * 
 * @param boolean $localConvert
 *   True will get the result convert, or false for the source
 * @param array $field
 *   Source field name, can be array, string or NULL
 *   This param will limit the output result on given field name
 * 
 * @return array
 *   Resulting scheme of source or convert result
 */
function dnchrm_experience_content_type_schema_vars($localConvert = FALSE, $field = NULL, $justinfos = FALSE) {
  $source = array(
    'organizational_experiences' => array('title', 'person', 'position', 'date_of_entry', 'date_of_out'),
    'work_experiences' => array(
      'title',
      'person',
      'address',
      'position_start',
      'position_end',
      'name_of_boss',
      'last_salary',
      'facilities',
      'date_of_entry',
      'date_of_out',
      'reasons'
    ),
  );
  if ($localConvert !== FALSE) {
    $source = dncctypevars_get_ctype_scheme_vars('dnchrm_experience', $source);
  }
  else {
    if ($justinfos !== FALSE) {
      $source = dncctypevars_get_scheme_infos('dnchrm_experience', $source);
    }
  }
  return empty($field) ? $source : (empty($source[$field]) ? NULL : $source[$field]);
}

/**
 * Listing data persons that have experience
 * 
 * @param array $form
 * @param array $form_state
 * @return string|array
 */
function dnchrm_experience_person_listing(array $form = array(), array $form_state = array()) {
  $scheme = dnchrm_content_type_schema_vars(TRUE, 'persons');
  if (empty($scheme['content_type'])) {
    unset ($scheme);
    return;
  }
  $nodetype = node_type_get_type($scheme['content_type']);
  $table = array();
  $table['header'] = array(
    'num' => array(
      'data' => t('Num.'),
      'width' => '5%',
      'style' => 'text-align: right',
      'type' => 'constant',
    ),
    'person' => array(
      'data' => $nodetype->title_label,
    ),
    'age' => array(
      'data' => t('Age'),
    ),
  );
  $limit = 10;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', $scheme['content_type']);
  $query->propertyCondition('status', NODE_PUBLISHED);
  $query->addMetaData('account', user_load(1));
  $query->pager($limit);
  $query->tableSort($table['header']);
  $result = $query->execute();
  unset ($query);
  if (empty($result['node'])) {
    unset ($result);
    return $form;
  }
  $table['rows'] = array();
  $nodes = node_load_multiple(array_keys($result['node']));
  $page = empty($_REQUEST['page']) ? 0 : $_REQUEST['page'];
  $i = ($page * $limit) + 1;
  unset ($result, $page, $limit);
  foreach ($nodes as $node) {
    $rows = array();
    $data = dncsystem_retrieve_node_data($scheme, $node, NULL, 'default');
    $rows['num'] = array(
      'data' => $i . '.',
      'style' => 'text-align: right',
    );
    $pview = l($data['title'], 'dnchrm/experience/' . $node->nid); 
    $rows['person'] = array(
      'data' => $pview,
    );
    unset ($pview);
    $rows['age'] = array(
      'data' => dncsystem_count_age($data['date_of_birth'], FALSE, TRUE),
    );
    $table['rows'][$node->nid] = $rows;
    unset ($data, $rows);
    $i++;
  }
  unset ($scheme, $i);
  $form['ctable'] = array(
    '#type' => 'item',
    '#markup' => theme('table', $table),
    '#weight' => 20,
  );
  unset ($table);
  return $form;
}

/**
 * Implementing hook_form_node_form_alter
 * to embeded some information and popup link form
 * and add integrity data person in some content type
 * 
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 * 
 * @return array
 */
function dnchrm_experience_form_node_form_alter(&$form, &$form_state, $form_id) {
  $scheme = dnchrm_experience_content_type_schema_vars(TRUE);
  foreach ($scheme as $keys => $values) {
    if ($form['#node']->type == $values['content_type']) {
      if (!user_access('use dnc hrm')) {
        drupal_set_message(t('Sorry you unauthorized :('), 'error', FALSE);
        drupal_goto('dnchrm/bio');
        return;
      }
    }
    if (!empty($values['fields']['person'])) {
      if ($form['#node']->type == $values['content_type']) {
        if (empty($form['#node']->{$values['fields']['person']}[$form[$values['fields']['person']]['#language']])) {
          drupal_set_message(t('Please use this menu to update this content type'), 'error', FALSE);
          drupal_set_message(t('Choose one of the person by clicking on the name'), 'error', FALSE);
          drupal_goto('dnchrm/experience');
          return;
        }
        $instance = field_info_instance('node', $values['fields']['person'], $values['content_type']);
        if ($instance['widget']['type'] == 'entityreference_autocomplete') {
          $form[$values['fields']['person']][$form[$values['fields']['person']]['#language']][0]['target_id']['#type'] = 'hidden';
        }
        else {
          $form[$values['fields']['person']][$form[$values['fields']['person']]['#language']]['#type'] = 'hidden';
        }
        unset ($instance);
      }
    }
  }
  unset ($scheme);
}

